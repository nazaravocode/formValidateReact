{"version":3,"sources":["components/Myinput.js","components/MyFormLite.js","App.js","serviceWorker.js","index.js"],"names":["Myinput","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","labelText","type","eventHandler","name","inpValue","errorValidate","react_default","a","createElement","className","concat","onChange","value","Component","MyFormLite","_this","handleSubmit","e","submited","state","preventDefault","setState","login","email","pass","emailValid","passValid","loginValid","formValid","onInputChange","bind","assertThisInitialized","_this2","_e$target","target","defineProperty","validateField","console","log","fieldName","_this$state","match","validateForm","onSubmit","components_Myinput","disabled","App","style","marginTop","components_MyFormLite","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2c78c4f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Myinput extends Component {\n    constructor(props){\n        super(props);\n    }\n\n    render() {\n        const {labelText, type, eventHandler, name, inpValue, errorValidate } = this.props;\n        return (\n            <div className=\"form-group\">\n                    <label className={`${errorValidate ? 'text-danger' : 'text-success'}`} >{labelText}</label>\n                    <input type={type} className={`form-control ${errorValidate ? 'is-invalid' : ''}`} name={name}\n                           onChange={eventHandler}\n                           value={inpValue}/>\n                </div>\n        );\n    }\n}\n\nexport default Myinput;","import React, {Component} from 'react';\nimport Myinput from './Myinput'\n\nclass MyFormLite extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            login: '',\n            email: '',\n            pass: '',\n            emailValid: false,\n            passValid: false,\n            loginValid: false,\n            formValid: false,\n            submited: false\n        }\n        this.onInputChange =  this.onInputChange.bind(this);\n    }\n\n    onInputChange(e) {\n        const {name, value} = e.target;\n        this.setState({[name]: value},\n            () => {\n                this.validateField(name, value)\n            });\n        console.log('onInputChange ->', this.state);\n    }\n\n    validateField(fieldName, value) {\n        let {emailValid, passValid, loginValid} = this.state;\n\n        switch (fieldName) {\n            case 'login':\n                loginValid = value == 'admin';\n                break;\n            case 'email':\n                emailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n                break;\n            case 'pass':\n                passValid =  value == '123';\n                break;\n            default:\n                break;\n        }\n        this.setState({\n            emailValid,\n            passValid,\n            loginValid\n        }, this.validateForm);\n    }\n    validateForm() {\n        this.setState({formValid: this.state.emailValid &&\n                this.state.passValid && this.state.loginValid});\n    }\n    handleSubmit = e => {\n        let submited =  !this.state.submited;\n        e.preventDefault();\n        this.setState({\n            submited\n        });\n    }\n    render() {\n        return (\n            // this.state.submited && <h1></h1>\n            this.state.submited ? <h1>Hello {this.state.login}</h1> : <form onSubmit={this.handleSubmit}>\n                    <Myinput\n                        labelText=\"Login\"\n                        type=\"text\"\n                        name=\"login\"\n                        inpValue={this.state.login}\n                        eventHandler={this.onInputChange}\n                        errorValidate={!this.state.loginValid}\n                    />\n                    <Myinput\n                        labelText=\"Email address\"\n                        type=\"email\"\n                        name=\"email\"\n                        inpValue={this.state.email}\n                        eventHandler={this.onInputChange}\n                        errorValidate={!this.state.emailValid}\n                    />\n                    <Myinput\n                        labelText=\"Password\"\n                        type=\"password\"\n                        name=\"pass\"\n                        inpValue={this.state.pass}\n                        eventHandler={this.onInputChange}\n                        errorValidate={!this.state.passValid}\n                    />\n                    <button className=\"btn btn-lg badge-success\"\n                            disabled={!this.state.formValid}\n                            type=\"submit\"\n                           >\n                        Confirm\n                    </button>\n                </form>\n        );\n    }\n\n}\n\nexport default MyFormLite;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport MyFormLite from './components/MyFormLite';\n\nfunction App() {\n  return (\n    <div className=\"container\"\n    style={{'marginTop':40}}>\n      <MyFormLite/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}